#include "unity.h"
#include "place.h"
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

void sleep_ms(int milliseconds) {
    usleep(milliseconds * 1000);
}

void setUp(void) {
    // Setup code, if needed
}

void tearDown(void) {
    // Teardown code, if needed
}

void test_no_args_instantiates(void) {
    Place *pl = place_create();
    TEST_ASSERT_NOT_NULL(pl);
    place_free(pl);
}

void test_new_instance_stored_in_objects(void) {
    // This requires a global storage or database, which we simulate here
    Place *pl = place_create();
    TEST_ASSERT_TRUE(pl != NULL); // Placeholder check
    place_free(pl);
}

void test_id_is_public_str(void) {
    Place *pl = place_create();
    TEST_ASSERT_EQUAL_STRING(pl->id, pl->id); // Check if ID is a string
    place_free(pl);
}

void test_created_at_is_public_datetime(void) {
    Place *pl = place_create();
    TEST_ASSERT_TRUE(pl->created_at.tm_year > 0);
    place_free(pl);
}

void test_updated_at_is_public_datetime(void) {
    Place *pl = place_create();
    TEST_ASSERT_TRUE(pl->updated_at.tm_year > 0);
    place_free(pl);
}

void test_city_id_is_public_class_attribute(void) {
    Place *pl = place_create();
    pl->city_id = strdup("city_123");
    TEST_ASSERT_EQUAL_STRING(pl->city_id, "city_123");
    place_free(pl);
}

void test_user_id_is_public_class_attribute(void) {
    Place *pl = place_create();
    pl->user_id = strdup("user_123");
    TEST_ASSERT_EQUAL_STRING(pl->user_id, "user_123");
    place_free(pl);
}

void test_name_is_public_class_attribute(void) {
    Place *pl = place_create();
    pl->name = strdup("PlaceName");
    TEST_ASSERT_EQUAL_STRING(pl->name, "PlaceName");
    place_free(pl);
}

void test_description_is_public_class_attribute(void) {
    Place *pl = place_create();
    pl->description = strdup("A nice place.");
    TEST_ASSERT_EQUAL_STRING(pl->description, "A nice place.");
    place_free(pl);
}

void test_number_rooms_is_public_class_attribute(void) {
    Place *pl = place_create();
    pl->number_rooms = 3;
    TEST_ASSERT_EQUAL_INT(pl->number_rooms, 3);
    place_free(pl);
}

void test_number_bathrooms_is_public_class_attribute(void) {
    Place *pl = place_create();
    pl->number_bathrooms = 2;
    TEST_ASSERT_EQUAL_INT(pl->number_bathrooms, 2);
    place_free(pl);
}

void test_max_guest_is_public_class_attribute(void) {
    Place *pl = place_create();
    pl->max_guest = 5;
    TEST_ASSERT_EQUAL_INT(pl->max_guest, 5);
    place_free(pl);
}

void test_price_by_night_is_public_class_attribute(void) {
    Place *pl = place_create();
    pl->price_by_night = 150;
    TEST_ASSERT_EQUAL_INT(pl->price_by_night, 150);
    place_free(pl);
}

void test_latitude_is_public_class_attribute(void) {
    Place *pl = place_create();
    pl->latitude = 37.7749;
    TEST_ASSERT_EQUAL_FLOAT(pl->latitude, 37.7749);
    place_free(pl);
}

void test_longitude_is_public_class_attribute(void) {
    Place *pl = place_create();
    pl->longitude = -122.4194;
    TEST_ASSERT_EQUAL_FLOAT(pl->longitude, -122.4194);
    place_free(pl);
}

void test_amenity_ids_is_public_class_attribute(void) {
    Place *pl = place_create();
    pl->amenity_ids = malloc(2 * sizeof(char*));
    pl->amenity_ids[0] = strdup("wifi");
    pl->amenity_ids[1] = strdup("pool");
    pl->amenity_count = 2;
    TEST_ASSERT_EQUAL_STRING(pl->amenity_ids[0], "wifi");
    TEST_ASSERT_EQUAL_STRING(pl->amenity_ids[1], "pool");
    place_free(pl);
}

void test_two_places_unique_ids(void) {
    Place *pl1 = place_create();
    Place *pl2 = place_create();
    TEST_ASSERT_NOT_EQUAL_STRING(pl1->id, pl2->id);
    place_free(pl1);
    place_free(pl2);
}

void test_two_places_different_created_at(void) {
    Place *pl1 = place_create();
    sleep_ms(50);
    Place *pl2 = place_create();
    TEST_ASSERT_TRUE(difftime(mktime(&pl1->created_at), mktime(&pl2->created_at)) < 0);
    place_free(pl1);
    place_free(pl2);
}

void test_two_places_different_updated_at(void) {
    Place *pl1 = place_create();
    sleep_ms(50);
    Place *pl2 = place_create();
    TEST_ASSERT_TRUE(difftime(mktime(&pl1->updated_at), mktime(&pl2->updated_at)) < 0);
    place_free(pl1);
    place_free(pl2);
}

void test_str_representation(void) {
    Place
